
Traffic light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000069a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000069a  0000072e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800062  00800062  00000730  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000760  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001131  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f0  00000000  00000000  00001a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb3  00000000  00000000  000022fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  00002eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ed  00000000  00000000  000030b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000059a  00000000  00000000  000036a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00003c3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 da 01 	call	0x3b4	; 0x3b4 <main>
  8a:	0c 94 4b 03 	jmp	0x696	; 0x696 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <AppInit>:
//app initializing function
void AppInit()
{
	//1- initializing:
	//button//
	ButtonInt(PORT_D,PIN_2);
  92:	62 e0       	ldi	r22, 0x02	; 2
  94:	84 e4       	ldi	r24, 0x44	; 68
  96:	0e 94 b6 01 	call	0x36c	; 0x36c <ButtonInt>
	//led 0//
	LedInt(PORT_A,PIN_0);
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	81 e4       	ldi	r24, 0x41	; 65
  9e:	0e 94 bf 01 	call	0x37e	; 0x37e <LedInt>
	//led 1//
	LedInt(PORT_A,PIN_1);
  a2:	61 e0       	ldi	r22, 0x01	; 1
  a4:	81 e4       	ldi	r24, 0x41	; 65
  a6:	0e 94 bf 01 	call	0x37e	; 0x37e <LedInt>
	//led 2//
	LedInt(PORT_A,PIN_2);
  aa:	62 e0       	ldi	r22, 0x02	; 2
  ac:	81 e4       	ldi	r24, 0x41	; 65
  ae:	0e 94 bf 01 	call	0x37e	; 0x37e <LedInt>
	//led 3//
	LedInt(PORT_A,PIN_3);
  b2:	63 e0       	ldi	r22, 0x03	; 3
  b4:	81 e4       	ldi	r24, 0x41	; 65
  b6:	0e 94 bf 01 	call	0x37e	; 0x37e <LedInt>
	//led 4//
	LedInt(PORT_A,PIN_4);
  ba:	64 e0       	ldi	r22, 0x04	; 4
  bc:	81 e4       	ldi	r24, 0x41	; 65
  be:	0e 94 bf 01 	call	0x37e	; 0x37e <LedInt>
	//led 5//
	LedInt(PORT_A,PIN_5);
  c2:	65 e0       	ldi	r22, 0x05	; 5
  c4:	81 e4       	ldi	r24, 0x41	; 65
  c6:	0e 94 bf 01 	call	0x37e	; 0x37e <LedInt>
	//timer 0//
	IntializeTimer_0();
  ca:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <IntializeTimer_0>
	//interrupt//
	EnableInterrupt_0();
  ce:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <EnableInterrupt_0>
  d2:	08 95       	ret

000000d4 <AppStart>:
void AppStart()
{
	while(1)
	{
		//2- select the mode
		switch(case_detector)
  d4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <case_detector>
  d8:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <case_detector+0x1>
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	91 05       	cpc	r25, r1
  e0:	09 f4       	brne	.+2      	; 0xe4 <AppStart+0x10>
  e2:	48 c0       	rjmp	.+144    	; 0x174 <AppStart+0xa0>
  e4:	1c f4       	brge	.+6      	; 0xec <AppStart+0x18>
  e6:	89 2b       	or	r24, r25
  e8:	49 f0       	breq	.+18     	; 0xfc <AppStart+0x28>
  ea:	f4 cf       	rjmp	.-24     	; 0xd4 <AppStart>
  ec:	82 30       	cpi	r24, 0x02	; 2
  ee:	91 05       	cpc	r25, r1
  f0:	09 f4       	brne	.+2      	; 0xf4 <AppStart+0x20>
  f2:	5d c0       	rjmp	.+186    	; 0x1ae <AppStart+0xda>
  f4:	03 97       	sbiw	r24, 0x03	; 3
  f6:	09 f4       	brne	.+2      	; 0xfa <AppStart+0x26>
  f8:	ac c0       	rjmp	.+344    	; 0x252 <AppStart+0x17e>
  fa:	ec cf       	rjmp	.-40     	; 0xd4 <AppStart>
//////////////////////////////////////////////// start of normal mode//////////////////////////////////////////////
			
///////////////////////////////////////// cars green on & pedestrian red on ///////////////////////////////////////
			case 0:
			//1- led 5(pedestrian red) on
			LedOn(PORT_A,PIN_5);
  fc:	65 e0       	ldi	r22, 0x05	; 5
  fe:	81 e4       	ldi	r24, 0x41	; 65
 100:	0e 94 c8 01 	call	0x390	; 0x390 <LedOn>
			
			//2- led 0(car green) on
			LedOn(PORT_A,PIN_0);
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	81 e4       	ldi	r24, 0x41	; 65
 108:	0e 94 c8 01 	call	0x390	; 0x390 <LedOn>
			
			//3- setting that theres no interrupt in process
			NoInterrupt = 1;
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 114:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			
			//4- 5 seconds delay
			Timer_0_Delay_5_Seconds();
 118:	0e 94 0b 03 	call	0x616	; 0x616 <Timer_0_Delay_5_Seconds>
			
			//5- going to the next case
			case_detector++;
 11c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <case_detector>
 120:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <case_detector+0x1>
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <case_detector+0x1>
 12a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <case_detector>
			break;
 12e:	d2 cf       	rjmp	.-92     	; 0xd4 <AppStart>
			case 1:
			//1- led 1(car yellow) (and led 4(pedestrian yellow)  if there's an interrupt)  blinking each 0.5 seconds
			for (int i = 0; i < 10; i++ )
			{
				//led 1(car yellow) on
				LedOn(PORT_A,PIN_1);
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	81 e4       	ldi	r24, 0x41	; 65
 134:	0e 94 c8 01 	call	0x390	; 0x390 <LedOn>
				
				//interrupt case: led 4 (pedestrian yellow) on if there's an interrupt
				if(NoInterrupt == 0)
 138:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 13c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 140:	89 2b       	or	r24, r25
 142:	21 f4       	brne	.+8      	; 0x14c <AppStart+0x78>
				LedOn(PORT_A,PIN_4);
 144:	64 e0       	ldi	r22, 0x04	; 4
 146:	81 e4       	ldi	r24, 0x41	; 65
 148:	0e 94 c8 01 	call	0x390	; 0x390 <LedOn>
				
				//0.5 second delay
				Timer_0_Delay_quarter_Seconds();
 14c:	0e 94 2b 03 	call	0x656	; 0x656 <Timer_0_Delay_quarter_Seconds>
				
				//led 1(car yellow) off
				LedOff(PORT_A,PIN_1);
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	81 e4       	ldi	r24, 0x41	; 65
 154:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LedOff>
				
				//interrupt case: led 4 (pedestrian yellow) off if there's an interrupt
				if(NoInterrupt == 0)
 158:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 15c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 160:	89 2b       	or	r24, r25
 162:	21 f4       	brne	.+8      	; 0x16c <AppStart+0x98>
				LedOff(PORT_A,PIN_4);
 164:	64 e0       	ldi	r22, 0x04	; 4
 166:	81 e4       	ldi	r24, 0x41	; 65
 168:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LedOff>
				
				//0.5 second delay
				Timer_0_Delay_quarter_Seconds();
 16c:	0e 94 2b 03 	call	0x656	; 0x656 <Timer_0_Delay_quarter_Seconds>
			
			
///////////////////////// cars yellow on (& pedestrian yellow on if there is an interrupt) ////////////////////////
			case 1:
			//1- led 1(car yellow) (and led 4(pedestrian yellow)  if there's an interrupt)  blinking each 0.5 seconds
			for (int i = 0; i < 10; i++ )
 170:	21 96       	adiw	r28, 0x01	; 1
 172:	02 c0       	rjmp	.+4      	; 0x178 <AppStart+0xa4>
void AppStart()
{
	while(1)
	{
		//2- select the mode
		switch(case_detector)
 174:	c0 e0       	ldi	r28, 0x00	; 0
 176:	d0 e0       	ldi	r29, 0x00	; 0
			
			
///////////////////////// cars yellow on (& pedestrian yellow on if there is an interrupt) ////////////////////////
			case 1:
			//1- led 1(car yellow) (and led 4(pedestrian yellow)  if there's an interrupt)  blinking each 0.5 seconds
			for (int i = 0; i < 10; i++ )
 178:	ca 30       	cpi	r28, 0x0A	; 10
 17a:	d1 05       	cpc	r29, r1
 17c:	cc f2       	brlt	.-78     	; 0x130 <AppStart+0x5c>
				//0.5 second delay
				Timer_0_Delay_quarter_Seconds();
			}
			
			//2- led 2(car green) off
			LedOff(PORT_A,PIN_0);
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	81 e4       	ldi	r24, 0x41	; 65
 182:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LedOff>
			
			//interrupt case: led 5 (pedestrian red) off 
			if(NoInterrupt == 0)
 186:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 18a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 18e:	89 2b       	or	r24, r25
 190:	21 f4       	brne	.+8      	; 0x19a <AppStart+0xc6>
			LedOff(PORT_A,PIN_5);
 192:	65 e0       	ldi	r22, 0x05	; 5
 194:	81 e4       	ldi	r24, 0x41	; 65
 196:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LedOff>
			
			//3- going to the next case
			case_detector++;
 19a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <case_detector>
 19e:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <case_detector+0x1>
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <case_detector+0x1>
 1a8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <case_detector>
			break;
 1ac:	93 cf       	rjmp	.-218    	; 0xd4 <AppStart>
			
			
/////////////////////////// cars red on (& pedestrian green on if there is an interrupt) //////////////////////////
			case 2:
			//interrupt case: led 5 (pedestrian red) off
			if(NoInterrupt == 0)
 1ae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1b6:	89 2b       	or	r24, r25
 1b8:	21 f4       	brne	.+8      	; 0x1c2 <AppStart+0xee>
			LedOff(PORT_A,PIN_5);
 1ba:	65 e0       	ldi	r22, 0x05	; 5
 1bc:	81 e4       	ldi	r24, 0x41	; 65
 1be:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LedOff>
			
			//1- led 2(car red) on
			LedOn(PORT_A,PIN_2);
 1c2:	62 e0       	ldi	r22, 0x02	; 2
 1c4:	81 e4       	ldi	r24, 0x41	; 65
 1c6:	0e 94 c8 01 	call	0x390	; 0x390 <LedOn>
			
			//interrupt case: led 3 (pedestrian green) on
			if(NoInterrupt == 0)
 1ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ce:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1d2:	89 2b       	or	r24, r25
 1d4:	21 f4       	brne	.+8      	; 0x1de <AppStart+0x10a>
			LedOn(PORT_A,PIN_3);
 1d6:	63 e0       	ldi	r22, 0x03	; 3
 1d8:	81 e4       	ldi	r24, 0x41	; 65
 1da:	0e 94 c8 01 	call	0x390	; 0x390 <LedOn>
			
			//2- 5 seconds delay
			Timer_0_Delay_5_Seconds();
 1de:	0e 94 0b 03 	call	0x616	; 0x616 <Timer_0_Delay_5_Seconds>
			
			//interrupt case: making a new delay
			if(renew_delay == 1)
 1e2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <renew_delay>
 1e6:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <renew_delay+0x1>
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	31 f4       	brne	.+12     	; 0x1fa <AppStart+0x126>
			{
				Timer_0_Delay_5_Seconds();
 1ee:	0e 94 0b 03 	call	0x616	; 0x616 <Timer_0_Delay_5_Seconds>
				renew_delay = 0;
 1f2:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <renew_delay+0x1>
 1f6:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <renew_delay>
			}
			
			
			//3- going to the next case
			case_detector++;
 1fa:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <case_detector>
 1fe:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <case_detector+0x1>
 202:	01 96       	adiw	r24, 0x01	; 1
 204:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <case_detector+0x1>
 208:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <case_detector>
			break;
 20c:	63 cf       	rjmp	.-314    	; 0xd4 <AppStart>
			case 3:
			//1- led 1(car yellow) (and led 4(pedestrian yellow)  if there's an interrupt)  blinking each 0.5 seconds
			for (int i = 0; i < 10; i++ )
			{
				//led 1(car yellow) on
				LedOn(PORT_A,PIN_1);
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	81 e4       	ldi	r24, 0x41	; 65
 212:	0e 94 c8 01 	call	0x390	; 0x390 <LedOn>
				
				//interrupt case: led 4 (pedestrian yellow) on if there's an interrupt
				if(NoInterrupt == 0)
 216:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 21a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 21e:	89 2b       	or	r24, r25
 220:	21 f4       	brne	.+8      	; 0x22a <AppStart+0x156>
				LedOn(PORT_A,PIN_4);
 222:	64 e0       	ldi	r22, 0x04	; 4
 224:	81 e4       	ldi	r24, 0x41	; 65
 226:	0e 94 c8 01 	call	0x390	; 0x390 <LedOn>
				
				//0.5 second delay
				Timer_0_Delay_quarter_Seconds();
 22a:	0e 94 2b 03 	call	0x656	; 0x656 <Timer_0_Delay_quarter_Seconds>
				
				//led 1(car yellow) off
				LedOff(PORT_A,PIN_1);
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	81 e4       	ldi	r24, 0x41	; 65
 232:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LedOff>
				
				//interrupt case: led 4 (pedestrian yellow) off if there's an interrupt
				if(NoInterrupt == 0)
 236:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 23a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 23e:	89 2b       	or	r24, r25
 240:	21 f4       	brne	.+8      	; 0x24a <AppStart+0x176>
				LedOff(PORT_A,PIN_4);
 242:	64 e0       	ldi	r22, 0x04	; 4
 244:	81 e4       	ldi	r24, 0x41	; 65
 246:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LedOff>
				
				//0.5 second delay
				Timer_0_Delay_quarter_Seconds();
 24a:	0e 94 2b 03 	call	0x656	; 0x656 <Timer_0_Delay_quarter_Seconds>
			
			
///////////////////////// cars yellow on (& pedestrian yellow on if there is an interrupt) ////////////////////////
			case 3:
			//1- led 1(car yellow) (and led 4(pedestrian yellow)  if there's an interrupt)  blinking each 0.5 seconds
			for (int i = 0; i < 10; i++ )
 24e:	21 96       	adiw	r28, 0x01	; 1
 250:	02 c0       	rjmp	.+4      	; 0x256 <AppStart+0x182>
void AppStart()
{
	while(1)
	{
		//2- select the mode
		switch(case_detector)
 252:	c0 e0       	ldi	r28, 0x00	; 0
 254:	d0 e0       	ldi	r29, 0x00	; 0
			
			
///////////////////////// cars yellow on (& pedestrian yellow on if there is an interrupt) ////////////////////////
			case 3:
			//1- led 1(car yellow) (and led 4(pedestrian yellow)  if there's an interrupt)  blinking each 0.5 seconds
			for (int i = 0; i < 10; i++ )
 256:	ca 30       	cpi	r28, 0x0A	; 10
 258:	d1 05       	cpc	r29, r1
 25a:	cc f2       	brlt	.-78     	; 0x20e <AppStart+0x13a>
				//0.5 second delay
				Timer_0_Delay_quarter_Seconds();
			}
			
			//2- led 0 (car red) off
			LedOff(PORT_A,PIN_2);
 25c:	62 e0       	ldi	r22, 0x02	; 2
 25e:	81 e4       	ldi	r24, 0x41	; 65
 260:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LedOff>
			
			//interrupt case: led 3 (pedestrian green) off
			if(NoInterrupt == 0)
 264:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 268:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 26c:	89 2b       	or	r24, r25
 26e:	21 f4       	brne	.+8      	; 0x278 <AppStart+0x1a4>
			LedOff(PORT_A,PIN_3);
 270:	63 e0       	ldi	r22, 0x03	; 3
 272:	81 e4       	ldi	r24, 0x41	; 65
 274:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LedOff>
			
			//interrupt case: go to case 2 (car red on & pedestrian green on)
			if(interrupt_case_3 == 1)
 278:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 27c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	71 f4       	brne	.+28     	; 0x2a0 <AppStart+0x1cc>
			{
				case_detector++;
 284:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <case_detector>
 288:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <case_detector+0x1>
 28c:	01 96       	adiw	r24, 0x01	; 1
 28e:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <case_detector+0x1>
 292:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <case_detector>
				interrupt_case_3 = 0;
 296:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 29a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
				break;
 29e:	1a cf       	rjmp	.-460    	; 0xd4 <AppStart>
			}
			
			
			//3- go back to case 0 (normal mode)
			case_detector = 0;
 2a0:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <case_detector+0x1>
 2a4:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <case_detector>
			break;
 2a8:	15 cf       	rjmp	.-470    	; 0xd4 <AppStart>

000002aa <__vector_1>:
		}
	}
}

ISR(EXT_INT_0)
{
 2aa:	1f 92       	push	r1
 2ac:	0f 92       	push	r0
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	2f 93       	push	r18
 2b6:	3f 93       	push	r19
 2b8:	4f 93       	push	r20
 2ba:	5f 93       	push	r21
 2bc:	6f 93       	push	r22
 2be:	7f 93       	push	r23
 2c0:	8f 93       	push	r24
 2c2:	9f 93       	push	r25
 2c4:	af 93       	push	r26
 2c6:	bf 93       	push	r27
 2c8:	ef 93       	push	r30
 2ca:	ff 93       	push	r31
	//1-when there is an external interrupt 0:
	
	//2-checking if there is no interrupt in process
	if (NoInterrupt == 1)
 2cc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2d0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	c9 f5       	brne	.+114    	; 0x34a <__vector_1+0xa0>
	{
		//3- setting that theres an interrupt in process
		NoInterrupt = 0;
 2d8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2dc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		//4- checking the case we were in:
		
		//5- if case 0 (car green on)
		if(case_detector == 0)
 2e0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <case_detector>
 2e4:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <case_detector+0x1>
 2e8:	00 97       	sbiw	r24, 0x00	; 0
 2ea:	19 f4       	brne	.+6      	; 0x2f2 <__vector_1+0x48>
		{
			//6- stopping the delay
			BreakTimer();
 2ec:	0e 94 04 03 	call	0x608	; 0x608 <BreakTimer>
 2f0:	2c c0       	rjmp	.+88     	; 0x34a <__vector_1+0xa0>
		}
		
		//5- if case 1 (car yellow on going to car red)
		else if(case_detector == 1)
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	91 05       	cpc	r25, r1
 2f6:	29 f4       	brne	.+10     	; 0x302 <__vector_1+0x58>
		{
			//6- led 4 (pedestrian yellow) on
			LedOn(PORT_A,PIN_4);
 2f8:	64 e0       	ldi	r22, 0x04	; 4
 2fa:	81 e4       	ldi	r24, 0x41	; 65
 2fc:	0e 94 c8 01 	call	0x390	; 0x390 <LedOn>
 300:	24 c0       	rjmp	.+72     	; 0x34a <__vector_1+0xa0>
		}
		
		//5- if case 3 (car yellow on going to car green)
		else if(case_detector == 3)
 302:	83 30       	cpi	r24, 0x03	; 3
 304:	91 05       	cpc	r25, r1
 306:	79 f4       	brne	.+30     	; 0x326 <__vector_1+0x7c>
		{
			//6- led 4 (pedestrian yellow) on
			LedOn(PORT_A,PIN_4);
 308:	64 e0       	ldi	r22, 0x04	; 4
 30a:	81 e4       	ldi	r24, 0x41	; 65
 30c:	0e 94 c8 01 	call	0x390	; 0x390 <LedOn>
			//7- go to case 2 after finishing the current case
			case_detector = 1 ;//note: the current case will add one
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <case_detector+0x1>
 318:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <case_detector>
			interrupt_case_3 = 1;//to enable going to case 2
 31c:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 320:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 324:	12 c0       	rjmp	.+36     	; 0x34a <__vector_1+0xa0>
		}
		
		//5- if case 2 (car red on)
		else if (case_detector == 2)
 326:	02 97       	sbiw	r24, 0x02	; 2
 328:	81 f4       	brne	.+32     	; 0x34a <__vector_1+0xa0>
		{
			//6- stopping the delay
			BreakTimer();
 32a:	0e 94 04 03 	call	0x608	; 0x608 <BreakTimer>
			//7- led 5(pedestrian red) off
			LedOff(PORT_A,PIN_5);
 32e:	65 e0       	ldi	r22, 0x05	; 5
 330:	81 e4       	ldi	r24, 0x41	; 65
 332:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LedOff>
			//8- led 3 (pedestrian green) on
			LedOn(PORT_A,PIN_3);
 336:	63 e0       	ldi	r22, 0x03	; 3
 338:	81 e4       	ldi	r24, 0x41	; 65
 33a:	0e 94 c8 01 	call	0x390	; 0x390 <LedOn>
			//9- make a new delay
			renew_delay = 1;
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <renew_delay+0x1>
 346:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <renew_delay>
		}
	}
 34a:	ff 91       	pop	r31
 34c:	ef 91       	pop	r30
 34e:	bf 91       	pop	r27
 350:	af 91       	pop	r26
 352:	9f 91       	pop	r25
 354:	8f 91       	pop	r24
 356:	7f 91       	pop	r23
 358:	6f 91       	pop	r22
 35a:	5f 91       	pop	r21
 35c:	4f 91       	pop	r20
 35e:	3f 91       	pop	r19
 360:	2f 91       	pop	r18
 362:	0f 90       	pop	r0
 364:	0f be       	out	0x3f, r0	; 63
 366:	0f 90       	pop	r0
 368:	1f 90       	pop	r1
 36a:	18 95       	reti

0000036c <ButtonInt>:

//initializing the button function
EN_ButtonErrors_t ButtonInt(char PORT_N, uint8_t PIN_N)
{
	// initializing pin N port N as intput and checking for error
	if(InitializePin(PORT_N, PIN_N, Input) != DIO_OK)
 36c:	40 e0       	ldi	r20, 0x00	; 0
 36e:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <InitializePin>
 372:	82 30       	cpi	r24, 0x02	; 2
 374:	11 f0       	breq	.+4      	; 0x37a <ButtonInt+0xe>
	{
		return BUTTON_ERROR;
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	08 95       	ret
	}
	return BUTTON_OK;
 37a:	81 e0       	ldi	r24, 0x01	; 1
}
 37c:	08 95       	ret

0000037e <LedInt>:

//initializing the led function
EN_LedErrors_t LedInt(char PORT_N, uint8_t PIN_N)
{
	// initializing pin N port N as output and checking for error
	if(	InitializePin(PORT_N, PIN_N, Output) != DIO_OK)
 37e:	41 e0       	ldi	r20, 0x01	; 1
 380:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <InitializePin>
 384:	82 30       	cpi	r24, 0x02	; 2
 386:	11 f0       	breq	.+4      	; 0x38c <LedInt+0xe>
	{
		return LED_ERROR;
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	08 95       	ret
	}
	return LED_OK;
 38c:	81 e0       	ldi	r24, 0x01	; 1
}
 38e:	08 95       	ret

00000390 <LedOn>:

//changing the led value to on function
EN_LedErrors_t LedOn(char PORT_N, uint8_t PIN_N)
{
	//writing 1 on pin N port N and checking for error
	if(ChangePinValue(PORT_N, PIN_N, High) != DIO_OK)
 390:	41 e0       	ldi	r20, 0x01	; 1
 392:	0e 94 65 02 	call	0x4ca	; 0x4ca <ChangePinValue>
 396:	82 30       	cpi	r24, 0x02	; 2
 398:	11 f0       	breq	.+4      	; 0x39e <LedOn+0xe>
	{
		return LED_ERROR;
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	08 95       	ret
	}
	return LED_OK;
 39e:	81 e0       	ldi	r24, 0x01	; 1
}
 3a0:	08 95       	ret

000003a2 <LedOff>:

//changing the led value to off function
EN_LedErrors_t LedOff(char PORT_N, uint8_t PIN_N)
{
	//writing 0 on pin N port N and checking for error
	if(ChangePinValue(PORT_N, PIN_N, Low) != DIO_OK)
 3a2:	40 e0       	ldi	r20, 0x00	; 0
 3a4:	0e 94 65 02 	call	0x4ca	; 0x4ca <ChangePinValue>
 3a8:	82 30       	cpi	r24, 0x02	; 2
 3aa:	11 f0       	breq	.+4      	; 0x3b0 <LedOff+0xe>
	{
		return LED_ERROR;
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	08 95       	ret
	}
	return LED_OK;
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	08 95       	ret

000003b4 <main>:

#include "APPLICATION/App/App.h"

int main(void)
{
	AppInit();
 3b4:	0e 94 49 00 	call	0x92	; 0x92 <AppInit>
	AppStart();
 3b8:	0e 94 6a 00 	call	0xd4	; 0xd4 <AppStart>
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	08 95       	ret

000003c2 <InitializePin>:

//initializing the pin function
EN_DioErrors_t InitializePin(char PORT_N, uint8_t PIN_N, PIN_State_t Pin_statue)
{
	//1-checking whether the state is input or output:
	if(Pin_statue == Output)
 3c2:	41 30       	cpi	r20, 0x01	; 1
 3c4:	d9 f5       	brne	.+118    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
	{
		//2-searching for the port
		switch(PORT_N)
 3c6:	82 34       	cpi	r24, 0x42	; 66
 3c8:	a9 f0       	breq	.+42     	; 0x3f4 <InitializePin+0x32>
 3ca:	18 f4       	brcc	.+6      	; 0x3d2 <InitializePin+0x10>
 3cc:	81 34       	cpi	r24, 0x41	; 65
 3ce:	31 f0       	breq	.+12     	; 0x3dc <InitializePin+0x1a>
 3d0:	76 c0       	rjmp	.+236    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 3d2:	83 34       	cpi	r24, 0x43	; 67
 3d4:	d9 f0       	breq	.+54     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3d6:	84 34       	cpi	r24, 0x44	; 68
 3d8:	29 f1       	breq	.+74     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 3da:	71 c0       	rjmp	.+226    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
		{
			case 'A': DDRA |= (1<<PIN_N); break; //3-changing the pin in port A value to 1
 3dc:	2a b3       	in	r18, 0x1a	; 26
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <InitializePin+0x26>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <InitializePin+0x22>
 3ec:	82 2b       	or	r24, r18
 3ee:	8a bb       	out	0x1a, r24	; 26
	else
	{
		return VALUE_ERROR;//return with error if the state data is wrong
	}
	
	return DIO_OK; //return ok after finishing
 3f0:	82 e0       	ldi	r24, 0x02	; 2
	if(Pin_statue == Output)
	{
		//2-searching for the port
		switch(PORT_N)
		{
			case 'A': DDRA |= (1<<PIN_N); break; //3-changing the pin in port A value to 1
 3f2:	08 95       	ret
			case 'B': DDRB |= (1<<PIN_N); break; //3-changing the pin in port B value to 1
 3f4:	27 b3       	in	r18, 0x17	; 23
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	6a 95       	dec	r22
 402:	e2 f7       	brpl	.-8      	; 0x3fc <InitializePin+0x3a>
 404:	82 2b       	or	r24, r18
 406:	87 bb       	out	0x17, r24	; 23
	else
	{
		return VALUE_ERROR;//return with error if the state data is wrong
	}
	
	return DIO_OK; //return ok after finishing
 408:	82 e0       	ldi	r24, 0x02	; 2
	{
		//2-searching for the port
		switch(PORT_N)
		{
			case 'A': DDRA |= (1<<PIN_N); break; //3-changing the pin in port A value to 1
			case 'B': DDRB |= (1<<PIN_N); break; //3-changing the pin in port B value to 1
 40a:	08 95       	ret
			case 'C': DDRC |= (1<<PIN_N); break; //3-changing the pin in port C value to 1
 40c:	24 b3       	in	r18, 0x14	; 20
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	6a 95       	dec	r22
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41c:	82 2b       	or	r24, r18
 41e:	84 bb       	out	0x14, r24	; 20
	else
	{
		return VALUE_ERROR;//return with error if the state data is wrong
	}
	
	return DIO_OK; //return ok after finishing
 420:	82 e0       	ldi	r24, 0x02	; 2
		//2-searching for the port
		switch(PORT_N)
		{
			case 'A': DDRA |= (1<<PIN_N); break; //3-changing the pin in port A value to 1
			case 'B': DDRB |= (1<<PIN_N); break; //3-changing the pin in port B value to 1
			case 'C': DDRC |= (1<<PIN_N); break; //3-changing the pin in port C value to 1
 422:	08 95       	ret
			case 'D': DDRD |= (1<<PIN_N); break; //3-changing the pin in port D value to 1
 424:	21 b3       	in	r18, 0x11	; 17
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	6a 95       	dec	r22
 432:	e2 f7       	brpl	.-8      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 434:	82 2b       	or	r24, r18
 436:	81 bb       	out	0x11, r24	; 17
	else
	{
		return VALUE_ERROR;//return with error if the state data is wrong
	}
	
	return DIO_OK; //return ok after finishing
 438:	82 e0       	ldi	r24, 0x02	; 2
		switch(PORT_N)
		{
			case 'A': DDRA |= (1<<PIN_N); break; //3-changing the pin in port A value to 1
			case 'B': DDRB |= (1<<PIN_N); break; //3-changing the pin in port B value to 1
			case 'C': DDRC |= (1<<PIN_N); break; //3-changing the pin in port C value to 1
			case 'D': DDRD |= (1<<PIN_N); break; //3-changing the pin in port D value to 1
 43a:	08 95       	ret
			default: return PORT_ERROR; //return with error if the port data is wrong
		}
	}
	
	else if(Pin_statue == Input)
 43c:	41 11       	cpse	r20, r1
 43e:	41 c0       	rjmp	.+130    	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
	{
		//2-searching for the port
		switch(PORT_N)
 440:	82 34       	cpi	r24, 0x42	; 66
 442:	b1 f0       	breq	.+44     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 444:	18 f4       	brcc	.+6      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 446:	81 34       	cpi	r24, 0x41	; 65
 448:	31 f0       	breq	.+12     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 44a:	3d c0       	rjmp	.+122    	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 44c:	83 34       	cpi	r24, 0x43	; 67
 44e:	e9 f0       	breq	.+58     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 450:	84 34       	cpi	r24, 0x44	; 68
 452:	41 f1       	breq	.+80     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 454:	38 c0       	rjmp	.+112    	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
		{
			case 'A': DDRA &= ~(1<<PIN_N); break; //3-changing the pin in port A value to 0
 456:	2a b3       	in	r18, 0x1a	; 26
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	02 c0       	rjmp	.+4      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	6a 95       	dec	r22
 464:	e2 f7       	brpl	.-8      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 466:	80 95       	com	r24
 468:	82 23       	and	r24, r18
 46a:	8a bb       	out	0x1a, r24	; 26
	else
	{
		return VALUE_ERROR;//return with error if the state data is wrong
	}
	
	return DIO_OK; //return ok after finishing
 46c:	82 e0       	ldi	r24, 0x02	; 2
	else if(Pin_statue == Input)
	{
		//2-searching for the port
		switch(PORT_N)
		{
			case 'A': DDRA &= ~(1<<PIN_N); break; //3-changing the pin in port A value to 0
 46e:	08 95       	ret
			case 'B': DDRB &= ~(1<<PIN_N); break; //3-changing the pin in port B value to 0
 470:	27 b3       	in	r18, 0x17	; 23
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	02 c0       	rjmp	.+4      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 478:	88 0f       	add	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	6a 95       	dec	r22
 47e:	e2 f7       	brpl	.-8      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 480:	80 95       	com	r24
 482:	82 23       	and	r24, r18
 484:	87 bb       	out	0x17, r24	; 23
	else
	{
		return VALUE_ERROR;//return with error if the state data is wrong
	}
	
	return DIO_OK; //return ok after finishing
 486:	82 e0       	ldi	r24, 0x02	; 2
	{
		//2-searching for the port
		switch(PORT_N)
		{
			case 'A': DDRA &= ~(1<<PIN_N); break; //3-changing the pin in port A value to 0
			case 'B': DDRB &= ~(1<<PIN_N); break; //3-changing the pin in port B value to 0
 488:	08 95       	ret
			case 'C': DDRC &= ~(1<<PIN_N); break; //3-changing the pin in port C value to 0
 48a:	24 b3       	in	r18, 0x14	; 20
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	02 c0       	rjmp	.+4      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	6a 95       	dec	r22
 498:	e2 f7       	brpl	.-8      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 49a:	80 95       	com	r24
 49c:	82 23       	and	r24, r18
 49e:	84 bb       	out	0x14, r24	; 20
	else
	{
		return VALUE_ERROR;//return with error if the state data is wrong
	}
	
	return DIO_OK; //return ok after finishing
 4a0:	82 e0       	ldi	r24, 0x02	; 2
		//2-searching for the port
		switch(PORT_N)
		{
			case 'A': DDRA &= ~(1<<PIN_N); break; //3-changing the pin in port A value to 0
			case 'B': DDRB &= ~(1<<PIN_N); break; //3-changing the pin in port B value to 0
			case 'C': DDRC &= ~(1<<PIN_N); break; //3-changing the pin in port C value to 0
 4a2:	08 95       	ret
			case 'D': DDRD &= ~(1<<PIN_N); break; //3-changing the pin in port D value to 0
 4a4:	21 b3       	in	r18, 0x11	; 17
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	6a 95       	dec	r22
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4b4:	80 95       	com	r24
 4b6:	82 23       	and	r24, r18
 4b8:	81 bb       	out	0x11, r24	; 17
	else
	{
		return VALUE_ERROR;//return with error if the state data is wrong
	}
	
	return DIO_OK; //return ok after finishing
 4ba:	82 e0       	ldi	r24, 0x02	; 2
		switch(PORT_N)
		{
			case 'A': DDRA &= ~(1<<PIN_N); break; //3-changing the pin in port A value to 0
			case 'B': DDRB &= ~(1<<PIN_N); break; //3-changing the pin in port B value to 0
			case 'C': DDRC &= ~(1<<PIN_N); break; //3-changing the pin in port C value to 0
			case 'D': DDRD &= ~(1<<PIN_N); break; //3-changing the pin in port D value to 0
 4bc:	08 95       	ret
		{
			case 'A': DDRA |= (1<<PIN_N); break; //3-changing the pin in port A value to 1
			case 'B': DDRB |= (1<<PIN_N); break; //3-changing the pin in port B value to 1
			case 'C': DDRC |= (1<<PIN_N); break; //3-changing the pin in port C value to 1
			case 'D': DDRD |= (1<<PIN_N); break; //3-changing the pin in port D value to 1
			default: return PORT_ERROR; //return with error if the port data is wrong
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	08 95       	ret
		}
	}
	
	else
	{
		return VALUE_ERROR;//return with error if the state data is wrong
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	08 95       	ret
		{
			case 'A': DDRA &= ~(1<<PIN_N); break; //3-changing the pin in port A value to 0
			case 'B': DDRB &= ~(1<<PIN_N); break; //3-changing the pin in port B value to 0
			case 'C': DDRC &= ~(1<<PIN_N); break; //3-changing the pin in port C value to 0
			case 'D': DDRD &= ~(1<<PIN_N); break; //3-changing the pin in port D value to 0
			default: return PORT_ERROR; //return with error if the port data is wrong
 4c6:	80 e0       	ldi	r24, 0x00	; 0
	{
		return VALUE_ERROR;//return with error if the state data is wrong
	}
	
	return DIO_OK; //return ok after finishing
}
 4c8:	08 95       	ret

000004ca <ChangePinValue>:

//setting the pin value function
EN_DioErrors_t ChangePinValue(char PORT_N, uint8_t PIN_N, PIN_Value_t Pin_value)
{
	//1-checking whether the state is high or low:
	if(Pin_value == High)
 4ca:	41 30       	cpi	r20, 0x01	; 1
 4cc:	d9 f5       	brne	.+118    	; 0x544 <ChangePinValue+0x7a>
	{
		//2-searching for the port
		switch(PORT_N)
 4ce:	82 34       	cpi	r24, 0x42	; 66
 4d0:	a9 f0       	breq	.+42     	; 0x4fc <ChangePinValue+0x32>
 4d2:	18 f4       	brcc	.+6      	; 0x4da <ChangePinValue+0x10>
 4d4:	81 34       	cpi	r24, 0x41	; 65
 4d6:	31 f0       	breq	.+12     	; 0x4e4 <ChangePinValue+0x1a>
 4d8:	76 c0       	rjmp	.+236    	; 0x5c6 <ChangePinValue+0xfc>
 4da:	83 34       	cpi	r24, 0x43	; 67
 4dc:	d9 f0       	breq	.+54     	; 0x514 <ChangePinValue+0x4a>
 4de:	84 34       	cpi	r24, 0x44	; 68
 4e0:	29 f1       	breq	.+74     	; 0x52c <ChangePinValue+0x62>
 4e2:	71 c0       	rjmp	.+226    	; 0x5c6 <ChangePinValue+0xfc>
		{
			case 'A': PORTA |= (1<<PIN_N); break; //3-changing the pin in port A value to 1
 4e4:	2b b3       	in	r18, 0x1b	; 27
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <ChangePinValue+0x26>
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	6a 95       	dec	r22
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <ChangePinValue+0x22>
 4f4:	82 2b       	or	r24, r18
 4f6:	8b bb       	out	0x1b, r24	; 27
	else
	{
		return VALUE_ERROR;//return with error if the value data is wrong
	}
	
	return DIO_OK; //return ok after finishing
 4f8:	82 e0       	ldi	r24, 0x02	; 2
	if(Pin_value == High)
	{
		//2-searching for the port
		switch(PORT_N)
		{
			case 'A': PORTA |= (1<<PIN_N); break; //3-changing the pin in port A value to 1
 4fa:	08 95       	ret
			case 'B': PORTB |= (1<<PIN_N); break; //3-changing the pin in port B value to 1
 4fc:	28 b3       	in	r18, 0x18	; 24
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	02 c0       	rjmp	.+4      	; 0x508 <ChangePinValue+0x3e>
 504:	88 0f       	add	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	6a 95       	dec	r22
 50a:	e2 f7       	brpl	.-8      	; 0x504 <ChangePinValue+0x3a>
 50c:	82 2b       	or	r24, r18
 50e:	88 bb       	out	0x18, r24	; 24
	else
	{
		return VALUE_ERROR;//return with error if the value data is wrong
	}
	
	return DIO_OK; //return ok after finishing
 510:	82 e0       	ldi	r24, 0x02	; 2
	{
		//2-searching for the port
		switch(PORT_N)
		{
			case 'A': PORTA |= (1<<PIN_N); break; //3-changing the pin in port A value to 1
			case 'B': PORTB |= (1<<PIN_N); break; //3-changing the pin in port B value to 1
 512:	08 95       	ret
			case 'C': PORTC |= (1<<PIN_N); break; //3-changing the pin in port C value to 1
 514:	25 b3       	in	r18, 0x15	; 21
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	02 c0       	rjmp	.+4      	; 0x520 <ChangePinValue+0x56>
 51c:	88 0f       	add	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	6a 95       	dec	r22
 522:	e2 f7       	brpl	.-8      	; 0x51c <ChangePinValue+0x52>
 524:	82 2b       	or	r24, r18
 526:	85 bb       	out	0x15, r24	; 21
	else
	{
		return VALUE_ERROR;//return with error if the value data is wrong
	}
	
	return DIO_OK; //return ok after finishing
 528:	82 e0       	ldi	r24, 0x02	; 2
		//2-searching for the port
		switch(PORT_N)
		{
			case 'A': PORTA |= (1<<PIN_N); break; //3-changing the pin in port A value to 1
			case 'B': PORTB |= (1<<PIN_N); break; //3-changing the pin in port B value to 1
			case 'C': PORTC |= (1<<PIN_N); break; //3-changing the pin in port C value to 1
 52a:	08 95       	ret
			case 'D': PORTD |= (1<<PIN_N); break; //3-changing the pin in port D value to 1
 52c:	22 b3       	in	r18, 0x12	; 18
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	02 c0       	rjmp	.+4      	; 0x538 <ChangePinValue+0x6e>
 534:	88 0f       	add	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	6a 95       	dec	r22
 53a:	e2 f7       	brpl	.-8      	; 0x534 <ChangePinValue+0x6a>
 53c:	82 2b       	or	r24, r18
 53e:	82 bb       	out	0x12, r24	; 18
	else
	{
		return VALUE_ERROR;//return with error if the value data is wrong
	}
	
	return DIO_OK; //return ok after finishing
 540:	82 e0       	ldi	r24, 0x02	; 2
		switch(PORT_N)
		{
			case 'A': PORTA |= (1<<PIN_N); break; //3-changing the pin in port A value to 1
			case 'B': PORTB |= (1<<PIN_N); break; //3-changing the pin in port B value to 1
			case 'C': PORTC |= (1<<PIN_N); break; //3-changing the pin in port C value to 1
			case 'D': PORTD |= (1<<PIN_N); break; //3-changing the pin in port D value to 1
 542:	08 95       	ret
			default: return PORT_ERROR;//return with error if the port data is wrong
		}
	}
	else if(Pin_value == Low)
 544:	41 11       	cpse	r20, r1
 546:	41 c0       	rjmp	.+130    	; 0x5ca <ChangePinValue+0x100>
	{
		//2-searching for the port
		switch(PORT_N)
 548:	82 34       	cpi	r24, 0x42	; 66
 54a:	b1 f0       	breq	.+44     	; 0x578 <ChangePinValue+0xae>
 54c:	18 f4       	brcc	.+6      	; 0x554 <ChangePinValue+0x8a>
 54e:	81 34       	cpi	r24, 0x41	; 65
 550:	31 f0       	breq	.+12     	; 0x55e <ChangePinValue+0x94>
 552:	3d c0       	rjmp	.+122    	; 0x5ce <ChangePinValue+0x104>
 554:	83 34       	cpi	r24, 0x43	; 67
 556:	e9 f0       	breq	.+58     	; 0x592 <ChangePinValue+0xc8>
 558:	84 34       	cpi	r24, 0x44	; 68
 55a:	41 f1       	breq	.+80     	; 0x5ac <ChangePinValue+0xe2>
 55c:	38 c0       	rjmp	.+112    	; 0x5ce <ChangePinValue+0x104>
		{
			case 'A': PORTA &= ~(1<<PIN_N); break; //3-changing the pin in port A value to 0
 55e:	2b b3       	in	r18, 0x1b	; 27
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	02 c0       	rjmp	.+4      	; 0x56a <ChangePinValue+0xa0>
 566:	88 0f       	add	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	6a 95       	dec	r22
 56c:	e2 f7       	brpl	.-8      	; 0x566 <ChangePinValue+0x9c>
 56e:	80 95       	com	r24
 570:	82 23       	and	r24, r18
 572:	8b bb       	out	0x1b, r24	; 27
	else
	{
		return VALUE_ERROR;//return with error if the value data is wrong
	}
	
	return DIO_OK; //return ok after finishing
 574:	82 e0       	ldi	r24, 0x02	; 2
	else if(Pin_value == Low)
	{
		//2-searching for the port
		switch(PORT_N)
		{
			case 'A': PORTA &= ~(1<<PIN_N); break; //3-changing the pin in port A value to 0
 576:	08 95       	ret
			case 'B': PORTB &= ~(1<<PIN_N); break; //3-changing the pin in port B value to 0
 578:	28 b3       	in	r18, 0x18	; 24
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	02 c0       	rjmp	.+4      	; 0x584 <ChangePinValue+0xba>
 580:	88 0f       	add	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	6a 95       	dec	r22
 586:	e2 f7       	brpl	.-8      	; 0x580 <ChangePinValue+0xb6>
 588:	80 95       	com	r24
 58a:	82 23       	and	r24, r18
 58c:	88 bb       	out	0x18, r24	; 24
	else
	{
		return VALUE_ERROR;//return with error if the value data is wrong
	}
	
	return DIO_OK; //return ok after finishing
 58e:	82 e0       	ldi	r24, 0x02	; 2
	{
		//2-searching for the port
		switch(PORT_N)
		{
			case 'A': PORTA &= ~(1<<PIN_N); break; //3-changing the pin in port A value to 0
			case 'B': PORTB &= ~(1<<PIN_N); break; //3-changing the pin in port B value to 0
 590:	08 95       	ret
			case 'C': PORTC &= ~(1<<PIN_N); break; //3-changing the pin in port C value to 0
 592:	25 b3       	in	r18, 0x15	; 21
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	02 c0       	rjmp	.+4      	; 0x59e <ChangePinValue+0xd4>
 59a:	88 0f       	add	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	6a 95       	dec	r22
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <ChangePinValue+0xd0>
 5a2:	80 95       	com	r24
 5a4:	82 23       	and	r24, r18
 5a6:	85 bb       	out	0x15, r24	; 21
	else
	{
		return VALUE_ERROR;//return with error if the value data is wrong
	}
	
	return DIO_OK; //return ok after finishing
 5a8:	82 e0       	ldi	r24, 0x02	; 2
		//2-searching for the port
		switch(PORT_N)
		{
			case 'A': PORTA &= ~(1<<PIN_N); break; //3-changing the pin in port A value to 0
			case 'B': PORTB &= ~(1<<PIN_N); break; //3-changing the pin in port B value to 0
			case 'C': PORTC &= ~(1<<PIN_N); break; //3-changing the pin in port C value to 0
 5aa:	08 95       	ret
			case 'D': PORTD &= ~(1<<PIN_N); break; //3-changing the pin in port D value to 0
 5ac:	22 b3       	in	r18, 0x12	; 18
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <ChangePinValue+0xee>
 5b4:	88 0f       	add	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	6a 95       	dec	r22
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <ChangePinValue+0xea>
 5bc:	80 95       	com	r24
 5be:	82 23       	and	r24, r18
 5c0:	82 bb       	out	0x12, r24	; 18
	else
	{
		return VALUE_ERROR;//return with error if the value data is wrong
	}
	
	return DIO_OK; //return ok after finishing
 5c2:	82 e0       	ldi	r24, 0x02	; 2
		switch(PORT_N)
		{
			case 'A': PORTA &= ~(1<<PIN_N); break; //3-changing the pin in port A value to 0
			case 'B': PORTB &= ~(1<<PIN_N); break; //3-changing the pin in port B value to 0
			case 'C': PORTC &= ~(1<<PIN_N); break; //3-changing the pin in port C value to 0
			case 'D': PORTD &= ~(1<<PIN_N); break; //3-changing the pin in port D value to 0
 5c4:	08 95       	ret
		{
			case 'A': PORTA |= (1<<PIN_N); break; //3-changing the pin in port A value to 1
			case 'B': PORTB |= (1<<PIN_N); break; //3-changing the pin in port B value to 1
			case 'C': PORTC |= (1<<PIN_N); break; //3-changing the pin in port C value to 1
			case 'D': PORTD |= (1<<PIN_N); break; //3-changing the pin in port D value to 1
			default: return PORT_ERROR;//return with error if the port data is wrong
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	08 95       	ret
			default: return PORT_ERROR;//return with error if the port data is wrong
		}
	}
	else
	{
		return VALUE_ERROR;//return with error if the value data is wrong
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	08 95       	ret
		{
			case 'A': PORTA &= ~(1<<PIN_N); break; //3-changing the pin in port A value to 0
			case 'B': PORTB &= ~(1<<PIN_N); break; //3-changing the pin in port B value to 0
			case 'C': PORTC &= ~(1<<PIN_N); break; //3-changing the pin in port C value to 0
			case 'D': PORTD &= ~(1<<PIN_N); break; //3-changing the pin in port D value to 0
			default: return PORT_ERROR;//return with error if the port data is wrong
 5ce:	80 e0       	ldi	r24, 0x00	; 0
	{
		return VALUE_ERROR;//return with error if the value data is wrong
	}
	
	return DIO_OK; //return ok after finishing
}
 5d0:	08 95       	ret

000005d2 <EnableInterrupt_0>:

//Enabling external interrupt 0 function
EN_InterruptError_t EnableInterrupt_0()
{
	//1-Enabling interrupts
	SREG |= (1<<7);
 5d2:	8f b7       	in	r24, 0x3f	; 63
 5d4:	80 68       	ori	r24, 0x80	; 128
 5d6:	8f bf       	out	0x3f, r24	; 63
	
	//2-setting the interrupt type(falling edge)
	MCUCR |= (0<<0) | (1<<1);
 5d8:	85 b7       	in	r24, 0x35	; 53
 5da:	82 60       	ori	r24, 0x02	; 2
 5dc:	85 bf       	out	0x35, r24	; 53
	
	//3-Enabling External interrupt 0
	GICR |= (1<<6);
 5de:	8b b7       	in	r24, 0x3b	; 59
 5e0:	80 64       	ori	r24, 0x40	; 64
 5e2:	8b bf       	out	0x3b, r24	; 59
	
	return INTERRUPT_OK;
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	08 95       	ret

000005e8 <IntializeTimer_0>:

//initializing timer 0 function
EN_TimerErrors_t IntializeTimer_0()
{
	//1-choosing the mood
	TCCR0 = 0x00;
 5e8:	13 be       	out	0x33, r1	; 51
	//2-setting timer start value
	TCNT0 = 0x00;
 5ea:	12 be       	out	0x32, r1	; 50
	
	return TIMER_OK; //returning no error
}
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	08 95       	ret

000005f0 <StartTimer_0>:

//starting timer 0 function
EN_TimerErrors_t StartTimer_0()
{
	//3-setting the prescaler
	TCCR0 |= (1<<0);
 5f0:	83 b7       	in	r24, 0x33	; 51
 5f2:	81 60       	ori	r24, 0x01	; 1
 5f4:	83 bf       	out	0x33, r24	; 51
	*(&stop_timer0) = 0;
 5f6:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <stop_timer0+0x1>
 5fa:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <stop_timer0>
	
	return TIMER_OK; //returning no error
}
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	08 95       	ret

00000602 <StopTimer_0>:

//stopping timer 0 function
EN_TimerErrors_t StopTimer_0()
{
	//1-setting timer/counter control register to 0
	TCCR0 = 0x00;
 602:	13 be       	out	0x33, r1	; 51
	
	return TIMER_OK; //returning no error
}
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	08 95       	ret

00000608 <BreakTimer>:

//breaking the delay loop function
EN_TimerErrors_t BreakTimer()
{
	*(&stop_timer0) = 1;
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <stop_timer0+0x1>
 610:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <stop_timer0>
	
	return TIMER_OK; //returning no error
}
 614:	08 95       	ret

00000616 <Timer_0_Delay_5_Seconds>:

//generating 5 seconds delay with timer 0 function
EN_TimerErrors_t Timer_0_Delay_5_Seconds()
{
	//1-starting timer 0
	StartTimer_0();
 616:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <StartTimer_0>
	
	long int Overflow_Counter = 0; //a variable to keep track of numbers of overflows
 61a:	40 e0       	ldi	r20, 0x00	; 0
 61c:	50 e0       	ldi	r21, 0x00	; 0
 61e:	ba 01       	movw	r22, r20
	
	//2-busy wait loop
	while (Overflow_Counter < 19531)
 620:	10 c0       	rjmp	.+32     	; 0x642 <Timer_0_Delay_5_Seconds+0x2c>
	{
		if (stop_timer0 == 1)
 622:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <stop_timer0>
 626:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <stop_timer0+0x1>
 62a:	01 97       	sbiw	r24, 0x01	; 1
 62c:	81 f0       	breq	.+32     	; 0x64e <Timer_0_Delay_5_Seconds+0x38>
		break;
		
		while((TIFR & (1<<0) ) == 0); //busy wait for the overflow flag
 62e:	08 b6       	in	r0, 0x38	; 56
 630:	00 fe       	sbrs	r0, 0
 632:	fd cf       	rjmp	.-6      	; 0x62e <Timer_0_Delay_5_Seconds+0x18>
		TIFR |= (1<<0);            //resetting the overflow flag
 634:	88 b7       	in	r24, 0x38	; 56
 636:	81 60       	ori	r24, 0x01	; 1
 638:	88 bf       	out	0x38, r24	; 56
		Overflow_Counter++;        //increasing the overflow numbers by 1
 63a:	4f 5f       	subi	r20, 0xFF	; 255
 63c:	5f 4f       	sbci	r21, 0xFF	; 255
 63e:	6f 4f       	sbci	r22, 0xFF	; 255
 640:	7f 4f       	sbci	r23, 0xFF	; 255
	StartTimer_0();
	
	long int Overflow_Counter = 0; //a variable to keep track of numbers of overflows
	
	//2-busy wait loop
	while (Overflow_Counter < 19531)
 642:	4b 34       	cpi	r20, 0x4B	; 75
 644:	8c e4       	ldi	r24, 0x4C	; 76
 646:	58 07       	cpc	r21, r24
 648:	61 05       	cpc	r22, r1
 64a:	71 05       	cpc	r23, r1
 64c:	54 f3       	brlt	.-44     	; 0x622 <Timer_0_Delay_5_Seconds+0xc>
		TIFR |= (1<<0);            //resetting the overflow flag
		Overflow_Counter++;        //increasing the overflow numbers by 1
	}
	
	//3-stopping the timer
	StopTimer_0();
 64e:	0e 94 01 03 	call	0x602	; 0x602 <StopTimer_0>
	
	return TIMER_OK; //returning no error
}
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	08 95       	ret

00000656 <Timer_0_Delay_quarter_Seconds>:

//generating 0.25 seconds delay with timer 0 function
EN_TimerErrors_t Timer_0_Delay_quarter_Seconds()
{
	//1-starting timer 0
	StartTimer_0();
 656:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <StartTimer_0>
	
	long int Overflow_Counter = 0; //a variable to keep track of numbers of overflows
 65a:	40 e0       	ldi	r20, 0x00	; 0
 65c:	50 e0       	ldi	r21, 0x00	; 0
 65e:	ba 01       	movw	r22, r20
	
	//2-busy wait loop
	while (Overflow_Counter < 976)
 660:	10 c0       	rjmp	.+32     	; 0x682 <Timer_0_Delay_quarter_Seconds+0x2c>
	{
		if (stop_timer0 == 1)
 662:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <stop_timer0>
 666:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <stop_timer0+0x1>
 66a:	01 97       	sbiw	r24, 0x01	; 1
 66c:	81 f0       	breq	.+32     	; 0x68e <Timer_0_Delay_quarter_Seconds+0x38>
		break;
		
		while((TIFR & (1<<0)) == 0); //busy wait for the overflow flag
 66e:	08 b6       	in	r0, 0x38	; 56
 670:	00 fe       	sbrs	r0, 0
 672:	fd cf       	rjmp	.-6      	; 0x66e <Timer_0_Delay_quarter_Seconds+0x18>
		TIFR |= (1<<0);			   //resetting the overflow flag
 674:	88 b7       	in	r24, 0x38	; 56
 676:	81 60       	ori	r24, 0x01	; 1
 678:	88 bf       	out	0x38, r24	; 56
		Overflow_Counter++;		   //increasing the overflow numbers by 1
 67a:	4f 5f       	subi	r20, 0xFF	; 255
 67c:	5f 4f       	sbci	r21, 0xFF	; 255
 67e:	6f 4f       	sbci	r22, 0xFF	; 255
 680:	7f 4f       	sbci	r23, 0xFF	; 255
	StartTimer_0();
	
	long int Overflow_Counter = 0; //a variable to keep track of numbers of overflows
	
	//2-busy wait loop
	while (Overflow_Counter < 976)
 682:	40 3d       	cpi	r20, 0xD0	; 208
 684:	83 e0       	ldi	r24, 0x03	; 3
 686:	58 07       	cpc	r21, r24
 688:	61 05       	cpc	r22, r1
 68a:	71 05       	cpc	r23, r1
 68c:	54 f3       	brlt	.-44     	; 0x662 <Timer_0_Delay_quarter_Seconds+0xc>
		TIFR |= (1<<0);			   //resetting the overflow flag
		Overflow_Counter++;		   //increasing the overflow numbers by 1
	}
	
	//3-stopping the timer
	StopTimer_0();
 68e:	0e 94 01 03 	call	0x602	; 0x602 <StopTimer_0>
	
	return TIMER_OK; //returning no error
}
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	08 95       	ret

00000696 <_exit>:
 696:	f8 94       	cli

00000698 <__stop_program>:
 698:	ff cf       	rjmp	.-2      	; 0x698 <__stop_program>
